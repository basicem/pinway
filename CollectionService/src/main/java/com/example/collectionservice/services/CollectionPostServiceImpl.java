package com.example.collectionservice.services;

import com.example.collectionservice.dto.*;
import com.example.collectionservice.exception.PinwayError;
import com.example.collectionservice.infrastructure.EventService;
import com.example.collectionservice.infrastructure.PostService;
import com.example.collectionservice.infrastructure.UserService;
import com.example.collectionservice.models.Collection;
import com.example.collectionservice.models.CollectionPost;
import com.example.collectionservice.repositories.CollectionPostRepository;
import com.example.collectionservice.repositories.CollectionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class CollectionPostServiceImpl implements CollectionPostService {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CollectionPostRepository collectionPostRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CollectionRepository collectionRepository;

    @Autowired
    private PostService postService;

    @Autowired
    private UserService userService;

    @Autowired
    private EventService eventService;

    @Override
    public Collection AddPost(Integer id, CollectionPostCreateDTO collectionPostCreateDTO) {
        Optional<Collection> optCollection = collectionRepository.findById(id);
        if (!optCollection.isPresent())
            throw new PinwayError("Not found Collection with id = " + id);
        // prvjera da li ima post sa IDem ovim datim

        Collection collection = optCollection.get();
        PostResponseDTO postDTO = postService.GetPost(collectionPostCreateDTO.getPostId());
        if (postDTO == null)
            throw new PinwayError("Not found Post with id = " + collectionPostCreateDTO.getPostId());


        UserDTO userDTO = userService.GetUser(collectionPostCreateDTO.getActionUserId());
        if (userDTO == null)
            throw new PinwayError("Not found User with id = " + collectionPostCreateDTO.getActionUserId());

        CollectionPost collectionPost = new CollectionPost(collectionPostCreateDTO.getPostId(), collection);

        collectionPostRepository.save(collectionPost);
        collectionRepository.increaseNumOfPosts(collection.getId());

        if(postDTO.userDTO.getId() != collectionPostCreateDTO.getActionUserId())
            eventService.PinCreated(collectionPostCreateDTO.getPostId(), id, postDTO.userDTO.getId() , userDTO.getUsername(), collectionPostCreateDTO.getActionUserId());

        return  collection;
    }

    @Override
    public void RemovePost(Integer collectionId, Long postId) {
        Optional<Collection> optCollection = collectionRepository.findByIdAndIsDeleted(collectionId, false);
        if (!optCollection.isPresent())
            throw new PinwayError("Not found Collection with id = " + collectionId);
        // prvjera da li ima kolekcija sa IDem ovim datim


        Boolean doesExist = postService.DoesExist(postId);
        if (!doesExist)
            throw new PinwayError("Not found Post with id = " + postId);

        CollectionPost collectionPost = collectionPostRepository.findByCollectionIdAndPostId(collectionId, postId);

        collectionPostRepository.deleteById(collectionPost.getId());

    }

    @Override
    public CollectionResponseDTO GetAllPostsForCollection(Integer id) {
        Optional<Collection> optCollection = collectionRepository.findByIdAndIsDeleted(id, false);
        if (!optCollection.isPresent())
            throw new PinwayError("Not found Collection with id = " + id);

        Collection collection = optCollection.get();
        Set<Long> ids = new HashSet<>();
        for (CollectionPost collectionPost : collection.getCollectionPosts()) {
            Boolean doesExist = postService.DoesExist(collectionPost.getPostId());
            if (!doesExist)
                throw new PinwayError("Not found Post with id = " + collectionPost.getPostId());
            ids.add(collectionPost.getPostId());
        }

        List<PostDTO> postDTOS = postService.GetAllPostsForCollection(ids);
        CollectionVisibilityTypeDTO collectionVisibilityTypeDTO = new CollectionVisibilityTypeDTO(collection.getCollectionVisibilityType().getId(), collection.getCollectionVisibilityType().getType());
        CollectionDTO collectionDTO = new CollectionDTO(collection.getId(), collection.getName(), collectionVisibilityTypeDTO);

        CollectionResponseDTO collectionResponseDTO = new CollectionResponseDTO(collectionDTO, postDTOS);

        return collectionResponseDTO;
    }


    @Override
    public Iterable<CollectionResponseDTO> FindPublicCollectionsForUser(Integer id) {
        Iterable<Collection> collections = collectionRepository.findAllByIsDeletedAndUserIdAndCollectionVisibilityType_Id(false, id, 2);

        List<CollectionResponseDTO> collectionResponseDTOS = new ArrayList<>();
        for (Collection c : collections) {
            CollectionResponseDTO collectionResponseDTO = GetAllPostsForCollection(c.getId());
            collectionResponseDTOS.add(collectionResponseDTO);
        }
        return  collectionResponseDTOS;
    }

    @Override
    public Iterable<CollectionResponseDTO> FindAllByUserId(Integer id) {
        Iterable<Collection> collections = collectionRepository.findAllByIsDeletedAndUserId(false, id);
        // za svaku kolekciju sada treba uzeti postove
        List<CollectionResponseDTO> collectionResponseDTOS = new ArrayList<>();
        for (Collection c : collections) {
            CollectionResponseDTO collectionResponseDTO = GetAllPostsForCollection(c.getId());
            collectionResponseDTOS.add(collectionResponseDTO);
        }
        return  collectionResponseDTOS;
    }
}
