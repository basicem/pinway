package com.example.postservice.controllers;

import com.example.postservice.dto.CommentDTO;
import com.example.postservice.dto.CommentResponseDTO;
import com.example.postservice.dto.PostResponseDTO;
import com.example.postservice.models.Comment;
import com.example.postservice.services.CommentService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Set;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api/comment") // This means URL's start with /demo (after Application path)
public class CommentController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CommentService commentService;

    @GetMapping(path="/getByPost")
    public  @ResponseBody ResponseEntity<Iterable<CommentResponseDTO>> getCommentByPostId  ( @NotNull @DecimalMin("0") @RequestParam Long PostId){
        Iterable<CommentResponseDTO> commentsForPost =  commentService.FindByPost(PostId);
        return  ResponseEntity.status(200).body(commentsForPost);
    }
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<Comment> addNewComment (@Valid @RequestBody CommentDTO commentDTO) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Comment comment = commentService.Create(commentDTO);
        return ResponseEntity.status(201).body(comment);
    }
    @DeleteMapping("/delete")
    public @ResponseBody ResponseEntity<Boolean> deleteComment(@RequestParam Long id){
        commentService.Delete(id);
        return ResponseEntity.status(204).body(true);
    }
    @PutMapping("/put")
    public @ResponseBody ResponseEntity<Comment> updateComment (@Valid @RequestBody CommentDTO commentDTO){
        Comment comment = commentService.Update(commentDTO);
        return ResponseEntity.status(200).body(comment);
    }



}
